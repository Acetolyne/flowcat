#! /usr/bin/python3

"""FlowCat

Usage:
  flowcat [-h] (-f folder/file) [-o outfile] [-l] [-g] [-m match]  

Options:
  -h --help     Show this screen.
  -l  Show line numbers
  -f /path/to/folder or file
  -o /path/to/outputfile
  -g  create GitHub issue from todo items
  -m regex to match a todo item for ex -m "#@note" matches anything after #@note. Defaults to 
     "#@todo\ "

  Regex arguments should be surrounded by quotes.
  Using ^ will mean the line has to begin with the regex statement and will not show lines that have code before the regex meaning inline comments will not be picked up
  All typical regex statements should be used, typically you will simply use the string you are searching for.

  Note that if the output file exists it will be overwritten not appended maybe in the next version.


"""

from docopt import docopt
import os
import re

arguments = docopt(__doc__, version='flowcat 1.1.0')
for k, v in list(arguments.items()):
    if(k == "-f"):
        fold = v
    if(k == "-o"):
        out = v
        if out != None:
            f = open(out, "w+")
            f.close()
    if(k == "-l"):
        l = v
    if(k == "-m"):
        if(v == None):
            match = "#@todo\ "
        else:
            match = v
    if(k == "-g"):
        g = v

def github():
    #@todo authenticate with github
    print("*****INFO: -g Option not yet implemented coming in 1.1.1*****\n")
    #@todo get all issues
    #@todo if the issue does not exist then create it

def write(output):
    if out != None:
        f = open(out, "a")
        f.write(output + "\n")


def getSingle(filename, match):
    f = open(filename, 'r')
    if fold != filename:
        fileprt=re.split(fold, filename)
        filename = fileprt[1]
    try:
        for line in f:
            if match[0] == '^':
                if(m.match(line)):
                    print(filename)
                    write(filename)
                    return True
            else:
                if(m.search(line)):
                    print(filename)
                    write(filename)
                    return True
    except UnicodeDecodeError:
        pass


def parseFile(m, filename, match):
    ln = 0
    #if match[0] == '^':
    #    curmatch = match[1:]
    #else:
    #    curmatch = match
    if "__pycache__" not in filename:
        if getSingle(filename, match) == True:
            f = open(filename, 'r')
            for line in f:
                ln += 1
                if match[0] == '^':
                    if(m.match(line)):
                        # only show the part of the line that is after the regular
                        # expression match
                        fin = re.split(match, line)
                        if l == True:
                            pre = "\t" + str(ln) + ") "
                        else:
                            pre = "\t"
                        print((pre + fin[1].rstrip()))
                        #@todo if -g is true then write to line and append reference to new github issue
                        write(pre + fin[1].rstrip())
                else:
                    if(m.search(line)):
                        # only show the part of the line that is after the regular
                        # expression match
                        fin = re.split(match, line)
                        if l == True:
                            pre = "\t" + str(ln) + ") "
                        else:
                            pre = "\t"
                        print((pre + fin[1].rstrip()))
                        write(pre + fin[1].rstrip())


def parseFolder(m, dirpath, dirnames, filenames, match):
    #if match[0] == '^':
    #    curmatch = match[1:]
    #else:
    #    curmatch = match
    dirname = ""
    for filename in filenames:
        if not filename.startswith("__"):
            curfile = fold+"/"+filename
            parseFile(m, curfile, match)
    for dirname in dirnames:
        if not dirname.startswith("."):
            if "__pycache__" not in dirname:
                curpath = fold + "/" + dirname
                for (dirpath, dirnames, filenames) in os.walk(curpath):
                    if not dirname.startswith("__"):
                        for filename in filenames:
                            filename = dirpath + "/" + filename
                            parseFile(m, filename, match)

#@todo create page on acetolyne.net for this tool
#@todo version 2 should be able to match on multiple regular expressions at a time.
#@todo create some automated tests with docker especially for testing regex
#@todo update readme with an example of the output
if g:
    github()
m = re.compile(match)
print(("Matching on '" + match + "'\n"))
if os.path.isdir(fold) == True:
    for (dirpath, dirnames, filenames) in os.walk(fold):
        parseFolder(m, dirpath, dirnames, filenames, match)
        break
elif os.path.isfile(fold) == True:
    filename = fold
    parseFile(m, filename, match)
else:
    print("Folder or file not found check your -f argument")
    exit
